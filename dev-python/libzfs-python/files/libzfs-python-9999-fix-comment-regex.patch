From 89d28d726a148c4e374f60d384ad017fd6444274 Mon Sep 17 00:00:00 2001
From: Kevin Kelley <kelleyk@kelleyk.net>
Date: Wed, 9 Dec 2015 11:30:22 -0800
Subject: [PATCH] Resolve issue with defines being discarded by
 comment-stripping regex; fix issue with inline function bodies being only
 partially removed.

---
 libzfs/manager.py | 29 +++++++++++++++++++----------
 1 file changed, 19 insertions(+), 10 deletions(-)

diff --git a/libzfs/manager.py b/libzfs/manager.py
index 3afeb80..46d5edc 100644
--- a/libzfs/manager.py
+++ b/libzfs/manager.py
@@ -235,17 +235,21 @@ def process_headers(self, output):  # NOQA
         function_blacklist = self._merge_with_environ(self.DEFAULT_FUNCTION_BLACKLIST,
                                                       'LIBZFS_FUNCTION_BLACKLIST',
                                                       'blacklist')
-
-        # Remove blank lines and those that contain only #-style or //-style comments.
-        output = '\n'.join(s for s in output.splitlines()
-                           if not re.match(r'^\s*(#|//|$)', s))
         
+        # Remove blank lines and those that contain only #-style or //-style comments.  This is made slightly more
+        # complicated because we cannot remove certain preprocessor directives that process_define_line() is interested in.
+        output = '\n'.join(s for s in output.splitlines()
+                           if not re.match(r'^\s*((#(?!(define|undef)))|//|$)', s))
+
         # First we reduce enums to a single line, and replace all tabs with spaces
         output = output.replace(',\n', ', ').replace('\n}', '}').replace('\t', ' ')
         # Now we remove double newlines and double spaces
-        output = re.sub('\s\s+', ' ', re.sub('\n\n+', '\n', output))
-        
+        output = re.sub(r'\n{2,}', '\n', output)
+        # This "double-negative" character class matches any non-newline whitespace.
+        output = re.sub(r'[^\S\r\n]{2,}', '\n', output)
+
         previous = None
+        in_function_body = False
         for line in output.splitlines():
             if previous:
                 line = previous + ' ' + line
@@ -260,10 +264,16 @@ def process_headers(self, output):  # NOQA
                 continue
             # Check if we're dealing with a function
             func_match = FUNCTION_REGEX.match(line)
+            if func_match and '{' in line:
+                in_function_body = True
+            if in_function_body:
+                if '}' in line:  # this line closes the function body
+                    in_function_body = False
+                continue  # skip lines that are in a function body, including the one that ends it
             if func_match and func_match.group(2).lstrip('*') in function_blacklist:
-                continue
+                continue  # ignore blacklisted functions
             if func_match and 'inline' in func_match.group(1):
-                continue
+                continue  # ignore inline function definition
             # Check if we're dealing with an enum line
             if line.startswith(self.TYPEDEF_ENUM) or line.startswith(self.NORMAL_ENUM):
                 line = self.process_enum_line(line)
@@ -285,7 +295,6 @@ def build_headers(self):
 
     def build_defines(self):  # NOQA
         items = copy.copy(self._defines)
-
         def _get(x):
             y = x
             if x[0] == '(' and x[-1] == ')':
@@ -300,7 +309,7 @@ def _get(x):
                 if magic != x:
                     return magic
             return y
-        processed_defines = {key: _get(value) for key, value in six.iteritems(self._defines)}
+        processed_defines = {key: _get(value) for key, value in six.iteritems(self._defines) if value is not None}
 
         for key, value in six.iteritems(processed_defines):
             if IS_INTEGER_VALUE.match(value):
