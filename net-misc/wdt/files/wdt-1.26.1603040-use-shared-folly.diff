--- CMakeLists.txt.orig	2016-04-26 17:27:57.844754556 -0400
+++ CMakeLists.txt	2016-04-26 17:32:01.048416872 -0400
@@ -43,33 +43,10 @@
 # So hardcoding for now:
 #set(CMAKE_BUILD_TYPE Debug)
 set(CMAKE_BUILD_TYPE Release)
-set(CMAKE_CXX_FLAGS "-msse4.2")
 #set(CMAKE_CXX_FLAGS "-msse4.2 -Wextra -Wsign-compare -Wunused-variable")
 #set(CMAKE_CXX_FLAGS "-msse4.2 -Wextra -Wsign-compare -Wunused-variable -Wconversion -Wsign-conversion")
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "_bin/wdt")
 
-# Check that we have the Folly source tree
-set(FOLLY_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../folly" CACHE path
-    "Folly source tree (folly/Conv.h should be reachable from there")
-# Check for folly - TODO: this doesn't work well for relative paths
-# (because of relative to build dir vs relative to source tree for -I)
-if(NOT EXISTS "${FOLLY_SOURCE_DIR}/folly/Conv.h")
-  MESSAGE(FATAL_ERROR "${FOLLY_SOURCE_DIR}/folly/Conv.h not found
-Fix using:
-(in a sister directory of the wdt source tree - same level:)
-git clone https://github.com/facebook/folly.git
-or change FOLLY_SOURCE_DIR (use ccmake or -DFOLLY_SOURCE_DIR=...)
-")
-endif()
-
-
-# The part of folly that isn't pure .h and we use:
-set (FOLLY_CPP_SRC
-"${FOLLY_SOURCE_DIR}/folly/Conv.cpp"
-"${FOLLY_SOURCE_DIR}/folly/Demangle.cpp"
-"${FOLLY_SOURCE_DIR}/folly/Checksum.cpp"
-)
-
 # WDT's library proper - comes from: ls -1 *.cpp | grep -iv test
 add_library(wdt_min
 util/WdtSocket.cpp
@@ -124,10 +101,13 @@
 # OpenSSL's crypto lib
 find_package(OpenSSL REQUIRED)
 include_directories(${OPENSSL_INCLUDE_DIR})
+# folly
+find_path(FOLLY_INCLUDE_DIR folly/ThreadLocal.h)
+find_library(FOLLY_LIBRARY folly)
 
 # You can also add jemalloc to the list if you have it/want it
 target_link_libraries(wdt_min
-  folly4wdt
+  ${FOLLY_LIBRARY}
   ${GLOG_LIBRARY}
   ${GFLAGS_LIBRARY}
   ${Boost_LIBRARIES}
@@ -147,56 +127,21 @@
 check_function_exists(posix_memalign HAS_POSIX_MEMALIGN)
 check_function_exists(posix_fadvise HAS_POSIX_FADVISE)
 # C based check (which fail with the c++ setting thereafter...)
-check_library_exists(rt clock_gettime "" FOLLY_HAVE_CLOCK_GETTIME)
 set(SAVE_CMRL ${CMAKE_REQUIRED_LIBRARIES}) #globals are evil/ugly
 set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
-check_function_exists(pthread_atfork FOLLY_HAVE_PTHREAD_ATFORK)
 set(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMRL}) #globals are evil/ugly
 # Needed until Cmake issue #15361 is addressed
 # All the check_function_exists should be before this line
 # or else they will not work'
 
 set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_CXX11_STANDARD_COMPILE_OPTION})
-check_include_file_cxx(malloc.h FOLLY_HAVE_MALLOC_H)
-check_include_file_cxx(features.h FOLLY_HAVE_FEATURES_H)
-check_include_file_cxx(bits/c++config.h FOLLY_HAVE_BITS_CXXCONFIG_H)
-check_include_file_cxx(bits/functexcept.h FOLLY_HAVE_BITS_FUNCTEXCEPT)
-check_include_file_cxx(linux/sockios.h WDT_HAS_SOCKIOS_H)
-#check_function_exists(clock_gettime FOLLY_HAVE_CLOCK_GETTIME)
-check_cxx_source_compiles("#include <type_traits>
-      #if !_LIBCPP_VERSION
-      #error No libc++
-      #endif
-      int main() {return 0;}" FOLLY_USE_LIBCPP)
-check_cxx_source_compiles(
-"extern \"C\" void cmkcheckweak() __attribute__((weak));
-int main(int argc, char** argv) {
-  return (cmkcheckweak) ? 1 : 0 ;
-}" FOLLY_HAVE_WEAK_SYMBOLS)
 # Now record all this :
-# Folly's:
-configure_file(build/folly-config.h.in folly/folly-config.h)
 # Wdt's config/version
 configure_file(WdtConfig.h.in wdt/WdtConfig.h)
 
-# Malloc stuff  tied to not supporting weaksympbols
-if (NOT FOLLY_HAVE_WEAK_SYMBOLS)
-  list(APPEND FOLLY_CPP_SRC "${FOLLY_SOURCE_DIR}/folly/detail/MallocImpl.cpp")
-  message(STATUS "no weak symbols, adding MallocImpl to folly src")
-endif()
-# For missing __throw_logic_error:
-if (NOT FOLLY_HAVE_BITS_FUNCTEXCEPT)
-  list(APPEND FOLLY_CPP_SRC "${FOLLY_SOURCE_DIR}/folly/detail/FunctionalExcept.cpp")
-  message(STATUS "no bits/functexcept.h, adding FunctionalExcept to folly src")
-endif()
-
-add_library(folly4wdt ${FOLLY_CPP_SRC})
-target_link_libraries(folly4wdt ${GLOG_LIBRARY})
-
 # Order is important - inside fb we want the above
-# folly-config.h to be picked up instead of the fbcode one
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
-include_directories(${FOLLY_SOURCE_DIR})
+include_directories(${FOLLY_INCLUDE_DIR})
 include_directories(${GLOG_INCLUDE_DIR})
 include_directories(${GFLAGS_INCLUDE_DIR})
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)
@@ -208,7 +153,7 @@
 
 ### Install rules
 set_target_properties(wdtbin PROPERTIES RUNTIME_OUTPUT_NAME "wdt")
-install(TARGETS wdtbin wdt wdt_min folly4wdt
+install(TARGETS wdtbin wdt wdt_min
   RUNTIME DESTINATION bin
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
